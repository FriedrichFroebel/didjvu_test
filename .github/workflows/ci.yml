name: CI
on:
- push
- pull_request
jobs:
  main:
    strategy:
      matrix:
        include:
        - os: ubuntu-latest
          python: 3.8
          cc: gcc
          gamera: master
        - os: ubuntu-latest
          python: 3.9
          cc: gcc
          gamera: master
        - os: ubuntu-latest
          python: '3.10'
          cc: gcc
          gamera: master
    runs-on: ${{ matrix.os }}
    name: Python ${{ matrix.python }} with Gamera ${{ matrix.gamera }}
    steps:
    - uses: actions/checkout@v2
    - name: set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - name: apt update
      run:
        sudo apt-get update
    - name: apt install deps
      run:
        sudo apt-get install
          djvulibre-bin
          docbook-xml
          docbook-xsl
          exiv2
          gir1.2-gexiv2-0.10
          libexempi[38]
          libpng-dev
          libtiff-dev
          libxml2-utils
          minidjvu
          python3-gi
          xsltproc
    - name: set up CC and CXX env variables
      run: |
        echo "cc=${CC}" >> $GITHUB_ENV
        echo "cxx=${CC/cc/++}" >> $GITHUB_ENV
      env:
        CC: ${{ matrix.cc || 'gcc' }}
    - name: apt install GCC
      run:
        sudo apt-get install ${{ env.cc }} ${{ env.cxx }}
      if: ${{ matrix.cc }}
    - name: install ccache
      run: |
        sudo apt-get install ccache
        echo "/usr/lib/ccache:$PATH" >> $GITHUB_PATH
    - name: check ccache setup
      run: |
        command -v ${{env.cc}} | grep /ccache/
        command -v ${{env.cxx}} | grep /ccache/
    - name: restore ccache data
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key:
          ccache-${{ matrix.os }}-${{ env.cc }}-${{ matrix.gamera }}
        restore-keys:
          ccache-${{ matrix.os }}-${{ env.cc }}-${{ matrix.gamera }}
      # if: ${{ matrix.gamera != 'master' }}
    - name: download Gamera
      run: |
        url="https://github.com/hsnr-gamera/gamera-4/archive/${{ matrix.gamera }}.tar.gz"
        mkdir -p deps/
        wget "$url" -O deps/gamera-${{ matrix.gamera }}.tar.gz
    - name: unpack Gamera
      run: |
        cd deps/
        tar -xvzf gamera-*.tar.gz
    - name: build Gamera
      run: |
        cd deps/gamera-*/
        python setup.py --nowx build
      env:
        CC: ${{env.cc}}
        CXX: ${{env.cxx}}
    - name: install Gamera
      run: |
        cd deps/gamera-*/
        python setup.py --nowx install
    - name: remove Gamera source
      run:
        rm -rf deps
    - name: install Pillow
      run: |
        python -m pip install Pillow
    - name: install python-xml-toolkit
      run:
        python -m pip install python-xmp-toolkit
    - name: install py3exiv2
      run: |
        sudo apt-get install libboost-python-dev libexiv2-dev
        python -m pip install py3exiv2
      if: ${{ matrix.python == '3.8' }}  # Fails with `cannot find -lboost_python39` otherwise.
    - name: set up PyGI
      run: |
        python -m pip install vext vext.gi
    #- name: set up PyGI
      #run: |
      #  cp -a /usr/lib/python2.7/dist-packages/gi ${{env.pythonLocation}}/lib/python2.7/site-packages/
      #  mv -v ${{env.pythonLocation}}/lib/python2.7/site-packages/gi/_gi{.x86_64-linux-gnu,}.so
    # Regular `nose` does not work any more with Python 3.10: https://github.com/nose-devs/nose/issues/1099
    # TODO: Upgrade to `nose2` or another test runner.
    - name: install nose
      run:
        pip install nose
    - name: run tests
      run:
        make test
    # Does not work correctly with `py3exiv2` installed for now.
    #- name: run pyflakes
      #run: |
        #python -m pip install pyflakes
        #python -m pyflakes .
    - name: check docs
      run: |
        python -m pip install docutils pygments
        make -C doc check
    - name: build docs
      run:
        make -C doc all
    - name: install
      run:
        make install PREFIX=$HOME/.local
    - name: check whether the executable was installed correctly
      run: |
        cd /
        didjvu --version
        didjvu --help
    - name: check whether the man page was installed correctly
      env:
        MANPATH: /home/runner/.local/share/man
        MANWIDTH: 80
      run: |
        cd /
        man 1 didjvu | grep -A 10 -w DIDJVU

# vim:ts=2 sts=2 sw=2 et
